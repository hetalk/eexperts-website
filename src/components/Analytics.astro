---
/*
 * Analytics Component
 * Last Updated: 2025-09-16 09:19:50 IST
 *
 * Features:
 * - Plausible Analytics integration
 * - Custom event tracking
 * - Goal conversion tracking
 * - Privacy-compliant analytics
 * - Performance monitoring
 * - Error tracking and reporting
 * - Real-time monitoring
 */

export interface Props {
  domain?: string;
  trackLocalhost?: boolean;
  enableHash?: boolean;
  enableOutboundLinks?: boolean;
}

const {
  domain = 'eexperts.info',
  trackLocalhost = false,
  enableHash = false,
  enableOutboundLinks = true
} = Astro.props;

const isDev = import.meta.env.DEV;
const shouldTrack = !isDev || trackLocalhost;

// Build script attributes
const scriptAttrs: Record<string, any> = {
  'data-domain': domain,
  src: 'https://plausible.io/js/script.js',
  defer: true
};

if (enableHash) {
  scriptAttrs.src = 'https://plausible.io/js/script.hash.js';
}

if (enableOutboundLinks) {
  scriptAttrs.src = enableHash
    ? 'https://plausible.io/js/script.hash.outbound-links.js'
    : 'https://plausible.io/js/script.outbound-links.js';
}
---

{shouldTrack && (
  <script
    {...scriptAttrs}
    is:inline
  ></script>
)}

<!-- Custom Analytics Functions -->
<script is:inline define:vars={{ shouldTrack, domain }}>
  // Analytics utilities
  window.analytics = {
    // Track custom events
    trackEvent: function(eventName, props = {}) {
      if (shouldTrack && window.plausible) {
        window.plausible(eventName, { props });
      }
    },

    // Track form submissions
    trackFormSubmission: function(formType, success = true) {
      this.trackEvent(success ? 'Form Submitted' : 'Form Error', {
        'Form Type': formType,
        'Status': success ? 'Success' : 'Error'
      });
    },

    // Track file downloads
    trackDownload: function(fileName, fileType) {
      this.trackEvent('File Download', {
        'File Name': fileName,
        'File Type': fileType
      });
    },

    // Track service interest
    trackServiceInterest: function(serviceName, source = 'unknown') {
      this.trackEvent('Service Interest', {
        'Service': serviceName,
        'Source': source
      });
    },

    // Track contact method usage
    trackContactMethod: function(method, location = 'unknown') {
      this.trackEvent('Contact Method Used', {
        'Method': method,
        'Location': location
      });
    },

    // Track page engagement
    trackEngagement: function(action, element) {
      this.trackEvent('Page Engagement', {
        'Action': action,
        'Element': element
      });
    },

    // Track business goals
    trackGoal: function(goalName, value = null) {
      if (shouldTrack && window.plausible) {
        const goalData = { goal: goalName };
        if (value) goalData.revenue = { currency: 'USD', amount: value };
        window.plausible('Goal', goalData);
      }
    },

    // Track errors
    trackError: function(errorType, errorMessage, stack = null) {
      this.trackEvent('JavaScript Error', {
        'Error Type': errorType,
        'Error Message': errorMessage.substring(0, 100), // Limit length
        'User Agent': navigator.userAgent.substring(0, 100),
        'Page': window.location.pathname
      });
    },

    // Track API errors
    trackApiError: function(endpoint, statusCode, errorMessage) {
      this.trackEvent('API Error', {
        'Endpoint': endpoint,
        'Status Code': statusCode.toString(),
        'Error Message': errorMessage.substring(0, 100)
      });
    },

    // Track form validation errors
    trackFormError: function(formType, fieldName, errorType) {
      this.trackEvent('Form Validation Error', {
        'Form Type': formType,
        'Field': fieldName,
        'Error Type': errorType
      });
    }
  };

  // Auto-track common interactions when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    if (!shouldTrack) return;

    // Track email reveals
    document.querySelectorAll('.email-protected').forEach(function(element) {
      element.addEventListener('click', function() {
        window.analytics.trackContactMethod('Email Reveal', 'Contact Page');
      });
    });

    // Track WhatsApp clicks
    document.querySelectorAll('a[href*="wa.me"]').forEach(function(element) {
      element.addEventListener('click', function() {
        window.analytics.trackContactMethod('WhatsApp', element.closest('section')?.id || 'Unknown');
      });
    });

    // Track service card clicks
    document.querySelectorAll('[data-service]').forEach(function(element) {
      element.addEventListener('click', function() {
        const service = element.dataset.service;
        window.analytics.trackServiceInterest(service, 'Service Card');
      });
    });

    // Track FAQ interactions
    document.querySelectorAll('[onclick*="toggleFAQ"]').forEach(function(element) {
      element.addEventListener('click', function() {
        window.analytics.trackEngagement('FAQ Toggle', 'Contact Page');
      });
    });

    // Track testimonial interactions
    document.querySelectorAll('.testimonial-dot, #next-testimonial, #prev-testimonial').forEach(function(element) {
      element.addEventListener('click', function() {
        window.analytics.trackEngagement('Testimonial Navigation', 'Home Page');
      });
    });

    // Track case study interactions
    document.querySelectorAll('.view-details-btn, .filter-btn').forEach(function(element) {
      element.addEventListener('click', function() {
        const action = element.classList.contains('filter-btn') ? 'Filter Case Studies' : 'View Case Study Details';
        window.analytics.trackEngagement(action, 'Home Page');
      });
    });

    // Track navigation menu usage
    document.querySelectorAll('nav a').forEach(function(element) {
      element.addEventListener('click', function() {
        window.analytics.trackEngagement('Navigation Click', element.textContent.trim());
      });
    });

    // Track dark mode toggle
    document.querySelectorAll('[onclick*="toggleDarkMode"]').forEach(function(element) {
      element.addEventListener('click', function() {
        const isDark = document.documentElement.classList.contains('dark');
        window.analytics.trackEngagement('Dark Mode Toggle', isDark ? 'Light Mode' : 'Dark Mode');
      });
    });

    // Track scroll depth
    let maxScroll = 0;
    let scrollTimeout;

    window.addEventListener('scroll', function() {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(function() {
        const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);

        if (scrollPercent > maxScroll) {
          maxScroll = scrollPercent;

          // Track milestone scroll depths
          if (scrollPercent >= 25 && maxScroll < 25) {
            window.analytics.trackEngagement('Scroll Depth', '25%');
          } else if (scrollPercent >= 50 && maxScroll < 50) {
            window.analytics.trackEngagement('Scroll Depth', '50%');
          } else if (scrollPercent >= 75 && maxScroll < 75) {
            window.analytics.trackEngagement('Scroll Depth', '75%');
          } else if (scrollPercent >= 90 && maxScroll < 90) {
            window.analytics.trackEngagement('Scroll Depth', '90%');
          }
        }
      }, 500);
    });

    // Track time on page (simplified)
    let timeOnPage = 0;
    const timeTracker = setInterval(function() {
      timeOnPage += 10;

      // Track time milestones
      if (timeOnPage === 30) {
        window.analytics.trackEngagement('Time on Page', '30 seconds');
      } else if (timeOnPage === 60) {
        window.analytics.trackEngagement('Time on Page', '1 minute');
      } else if (timeOnPage === 180) {
        window.analytics.trackEngagement('Time on Page', '3 minutes');
      } else if (timeOnPage === 300) {
        window.analytics.trackEngagement('Time on Page', '5 minutes');
        clearInterval(timeTracker);
      }
    }, 10000); // Every 10 seconds

    // Clear interval when user leaves
    window.addEventListener('beforeunload', function() {
      clearInterval(timeTracker);
    });

    // Track performance metrics
    if (window.performance && window.performance.getEntriesByType) {
      window.addEventListener('load', function() {
        setTimeout(function() {
          const navigationEntry = window.performance.getEntriesByType('navigation')[0];

          if (navigationEntry) {
            const loadTime = Math.round(navigationEntry.loadEventEnd - navigationEntry.loadEventStart);
            const domContentLoaded = Math.round(navigationEntry.domContentLoadedEventEnd - navigationEntry.domContentLoadedEventStart);

            // Track performance goals
            if (loadTime < 3000) {
              window.analytics.trackGoal('Fast Page Load');
            }

            window.analytics.trackEvent('Page Performance', {
              'Load Time': Math.round(loadTime / 100) * 100 + 'ms', // Round to nearest 100ms
              'DOM Content Loaded': Math.round(domContentLoaded / 100) * 100 + 'ms'
            });
          }
        }, 1000);
      });
    }
  });

  // Track page visibility for better engagement metrics
  document.addEventListener('visibilitychange', function() {
    if (document.visibilityState === 'hidden') {
      window.analytics.trackEngagement('Page Hidden', window.location.pathname);
    } else {
      window.analytics.trackEngagement('Page Visible', window.location.pathname);
    }
  });

  // Global error handling
  window.addEventListener('error', function(event) {
    window.analytics.trackError(
      'JavaScript Error',
      event.message,
      event.filename + ':' + event.lineno
    );
  });

  // Handle unhandled promise rejections
  window.addEventListener('unhandledrejection', function(event) {
    window.analytics.trackError(
      'Unhandled Promise Rejection',
      event.reason?.message || 'Unknown promise rejection',
      event.reason?.stack || 'No stack trace'
    );
  });

  // Track console errors (in production only)
  if (!window.location.hostname.includes('localhost')) {
    const originalConsoleError = console.error;
    console.error = function(...args) {
      window.analytics.trackError(
        'Console Error',
        args.join(' ').substring(0, 200)
      );
      originalConsoleError.apply(console, args);
    };
  }

  // Monitor performance issues
  if ('PerformanceObserver' in window) {
    // Long task monitoring
    try {
      const longTaskObserver = new PerformanceObserver(function(list) {
        list.getEntries().forEach(function(entry) {
          if (entry.duration > 50) { // Tasks longer than 50ms
            window.analytics.trackEvent('Performance Issue', {
              'Type': 'Long Task',
              'Duration': Math.round(entry.duration) + 'ms',
              'Start Time': Math.round(entry.startTime) + 'ms'
            });
          }
        });
      });
      longTaskObserver.observe({ entryTypes: ['longtask'] });
    } catch (e) {
      // Long task monitoring not supported
    }

    // Largest Contentful Paint monitoring
    try {
      const lcpObserver = new PerformanceObserver(function(list) {
        const entries = list.getEntries();
        const lastEntry = entries[entries.length - 1];

        if (lastEntry.startTime > 2500) { // LCP > 2.5s is concerning
          window.analytics.trackEvent('Performance Issue', {
            'Type': 'Slow LCP',
            'LCP Time': Math.round(lastEntry.startTime) + 'ms'
          });
        }
      });
      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
    } catch (e) {
      // LCP monitoring not supported
    }
  }
</script>

<!-- Goal definitions for reference -->
<!--
Plausible Goals to set up in dashboard:
1. Form Submitted - Contact form completions
2. Service Interest - Service page visits or clicks
3. Contact Method Used - WhatsApp, email, or phone interactions
4. Fast Page Load - Pages loading under 3 seconds
5. High Engagement - Users scrolling 75%+ or staying 3+ minutes
6. Download - File downloads
7. Quote Request - Quote/consultation requests
-->

<style>
  /* Hide analytics in development */
  :global(.dev-analytics-notice) {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: #f97316;
    color: white;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 12px;
    z-index: 1000;
    opacity: 0.8;
  }
</style>

{!shouldTrack && (
  <div class="dev-analytics-notice">
    Analytics disabled (dev mode)
  </div>
)}